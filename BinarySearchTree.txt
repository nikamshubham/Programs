#include"iostream"
using namespace std;
typedef struct Node
{
        int data;
        struct Node *left;
        struct Node *right;
}node;
class bst
{
        private:
                node *root;

        public:
                bst()
                {
                        root=NULL;
                }
                bool isEmpty()
                {
                        if(root==NULL)
                                return true;
                        else
                                return false;
                }
                node *createNode(int data)
                {
                        node *newnode=new node;
                        newnode->data=data;
                        newnode->left=NULL;
                        newnode->right=NULL;
                        return newnode;
                }

                void addnode(int data)
                {
                        node *newnode=createNode(data);
                        if(isEmpty())
                        {
                                root=newnode;
                                return;
                        }
                        node *temp=root;
                        while(temp!=NULL)
                        {
                                if(data<temp->data)
                                {
                                        if(temp->left==NULL)
                                        {
                                                temp->left=newnode;
                                                break;
                                        }
                                        temp=temp->left;
                                }
                                else
                                {
                                        if(temp->right==NULL)
                                        {
                                                temp->right=newnode;
                                                break;
                                        }
                                        temp=temp->right;
                                }
                        }
                }

                void pre_order()
                {
                        preorder(root);
                }
                void preorder(node *r)

                {

                        if(r==NULL)return;
                        cout<<r->data<<endl;
                        preorder(r->left);
                        preorder(r->right);
                }
                void inorderutil()
                {
                        inorder(root);
                }
                void inorder(node *r)
                {
                        if(r==NULL)return;
                        inorder(r->left);
                        cout<<r->data<<endl;
                        inorder(r->right);
                }
};
int main()
{
        bst b;
        b.addnode(50);
        b.addnode(30);
        b.addnode(65);
        b.addnode(20);
        b.addnode(45);
        b.addnode(55);
        b.addnode(40);
        b.pre_order();
"bst.cpp" 104L, 1398C written                                                                                                       
[dsaug68@setuk practise]$ ls
a.out  bst.cpp
[dsaug68@setuk practise]$ vi bst.cpp 
                {
                        preorder(root);
                }
                void preorder(node *r)

                {

                        if(r==NULL)return;
                        cout<<r->data<<endl;
                        preorder(r->left);
                        preorder(r->right);
                }
                void inorderutil()
                {
                        inorder(root);
                }
                void inorder(node *r)
                {
                        if(r==NULL)return;
                        inorder(r->left);
                        cout<<r->data<<endl;
                        inorder(r->right);
                }
};
int main()
{
        bst b;
        b.addnode(50);
        b.addnode(30);
        b.addnode(65);
        b.addnode(20);
        b.addnode(45);
        b.addnode(55);
        b.addnode(40);
        b.pre_order();
        b.inorderutil();
}
