#include "iostream"
#include "cstring"
#include "cstdlib"
using namespace std;
typedef struct Node
{
        int data;
        struct Node *left;
        struct Node *right;
}node;

class BST
{
        node *root;
        public:

        BST()
        {
                root=NULL;
        }

        node* createNode(int data)
        {
                node *newnode=new node;
                newnode->left=NULL;
                newnode->right=NULL;
                newnode->data=data;
                return newnode;
        }

bool isEmpty()
{
        if(root==NULL)
        {
                return true;
        }
        else
        {
                return false;
        }
}

void addNode(int data)
{
        node *newnode=createNode(data);
        if(isEmpty())
        {
                root=newnode;
                return;
        }
        node *temp=root;
        while(temp!=NULL)
        {
                if(data < temp->data)
                {
                        if(temp->left ==NULL)
                        {
                                temp->left=newnode;
                                break;
                        }
                        temp=temp->left;
                }
                else
                {

                        if(temp->right== NULL)
                        {
                                temp->right=newnode;
                                break;
                        }
                        temp=temp->right;

                }
        }
}

void inorder(node *r)
{

        if(r==NULL)
        {
                return;
        }
        inorder(r->left);
        cout<<r->data<<endl;
        inorder(r->right);
}


void preorder(node *r)
{
        if(r==NULL)
        {
                return;
        }
        cout<<r->data<<endl;
        preorder(r->left);
        preorder(r->right);
}

void postorder(node *r)
{
        if(r==NULL)
        {
                return;
        }
        postorder(r->left);
        postorder(r->right);
        cout<<r->data<<endl;
}

void inorderutil()
{
        inorder(root);

}

void preorderutil()
{
        preorder(root);
}

void postorderutil()
{
        postorder(root);
}


int heightNode(node *n)
{
        if(n==NULL)
        {
                return -1;
        }
        int h1=heightNode(n->left);
        int  h2=heightNode(n->right);
        if(h1>h2)
        {
                return (h1+1);
        }
        else
        {
                return (h2+1);
        }
}

void min(node *n)
{
        if(n->left==NULL)
        {

        cout<<n->data<<endl;
           return;
        }
        min(n->left);

}

void max(node *n)
{

        if(n->right==NULL)
        {
                cout<<n->data;
                return ;
        }
        //node *temp;
        max(n->right);
        //temp=n->right;
        //cout<<temp->data<<endl;
}
void max()
{
        max(root);
}
void min()
{
        min(root);
}

void height()
{
        cout<<"Height:"<<heightNode(root)<<endl;
}

};

int main()
{
        BST b;
        int ch;
        while(1)
         {      cout<<endl;
                cout<<"Enter your choice:"<<endl<<"1.ADD NODE"<<endl<<"2.INORDER"<<endl<<"3.PREORDER"<<endl<<"4.POSTORDER"<<endl<<"5.EXIT"<<endl<<"6.Height"<<endl<<"7. MIN " <<endl<<"8. MAX"<<endl;
                cin>>ch;
                switch(ch)
                {
                        case 1:
                                {
                                        int m;
                                        cout<<"Enter node which you want to add:"<<endl;
                                        cin>>m;
                                        b.addNode(m);
                                        break;
                                }


                        case 2:
                                {
                                        cout<<"Inorder:"<<endl;
                                        b.inorderutil();
                                        break;
                                }

                        case 3:
                                {
                                        cout<<"Preorder:"<<endl;
                                        b.preorderutil();
                                        break;
                                }

                        case 4:
                                {
                                        cout<<"Postorder: "<<endl;
                                        b.postorderutil();
                                        break;
                                }

                        case 5:
                                {
                                        exit(0);
                                }
                        case 6:
                                {

                                        b.height();
                                        break;
                                }
                        case 7:
                                {
                                        b.min();
                                        break;
                                }
                        case 8:
                                {
                                        b.max();
                                        break;
                                }
                        case 9:
                                exit(1);
                }
        }
        return 0;
}

 