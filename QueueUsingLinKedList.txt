#include"iostream"
#include"cstring"
#include"cstdlib"
using namespace std;
typedef struct Node
{
        int data;
        struct Node *next;
}node;

class LinkedList
{
        private:
                node *front;
                node *rear;
                int total_count;
        public:
                LinkedList();
                bool isEmpty();
                node *create_node(int data)
                {
                        node *newnode=new node;
                        newnode->data=data;
                        newnode->next=NULL;
                        return newnode;
                }

                node* getfront();
                node* getrear();
                void add_rear(int);
                void delete_rear();
                void display();
};
LinkedList::LinkedList()
{
        front=NULL;
        rear=NULL;
        total_count=0;
}


bool LinkedList::isEmpty()
{
        if(total_count==0)
                return true;
        else
                return false;
}

void LinkedList::add_rear(int data)
{
        node *newnode=create_node(data);
        if(isEmpty())
        {
                front=newnode;
                rear= newnode;
        }
        else
        {
                rear->next=newnode;
                rear=newnode;
        }
        total_count=total_count+1;
}
void LinkedList::delete_rear()
{
        node *temp=front;
        if(isEmpty())
        {
                cout<<"No element to delete from the list"<<endl;
        }
        else
        {
                front=temp->next;
                delete temp;
                total_count=total_count-1;
                if(total_count==0)
                {
                        front=rear=NULL;
                }

        }

}
void LinkedList::display()
{

        if(isEmpty())
                cout<<"List is empty"<<endl;
        else
        { node *n;
                for(n=front;n->next!=NULL;n=n->next)
                {
                        cout<<n->data<<endl;

                }
                cout<<n->data<<endl;
        }

}

node* LinkedList::getfront()
{
        cout<<"Element at first: "<<front->data<<endl;

}
node* LinkedList::getrear()
{
        cout<<"Element at last: "<<rear->data<<endl;

}
int main()
{
        LinkedList a;
        int i=0;
        while(1)
        {
                cout<<"Enter the choice "<<endl;
                cout<<"1.Add into queue"<<endl;
                cout<<"2.Delete into to queue"<<endl;
                cout<<"3.Get front"<<endl;
                cout<<"4.GET Rear"<<endl;
                cout<<"5.DISPLAY"<<endl;
                cout<<"6.Exit"<<endl;
                cin>>i;
                switch(i)
                {
                        case 1:
                                {
                                        int m;
                                        cout<<"Enter the element to add into linked list based queue "<<endl;
                                        cin>>m;
                                        a.add_rear(m);
                                        break;
                                }

                        case 2:
                                {
                                        a.delete_rear();
                                        break;
                                }

                        case 3:
                                {
                                        a.getfront();
                                        break;
                                }
                        case 4:
                                {
                                        a.getrear();
                                        break;
                                }
                        case 5:
                                {
                                        a.display();
                                        break;
                                }

                        case 6:
                                        exit(1);
                }
        }
}